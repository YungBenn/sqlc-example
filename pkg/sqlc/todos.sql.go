// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: todos.sql

package sqlc

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (todo, description)
VALUES ($1, $2)
RETURNING id, todo, description
`

type CreateTodoParams struct {
	Todo        string `json:"todo"`
	Description string `json:"description"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, createTodo, arg.Todo, arg.Description)
	var i Todo
	err := row.Scan(&i.ID, &i.Todo, &i.Description)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos 
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, todo, description FROM todos
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id int32) (Todo, error) {
	row := q.db.QueryRow(ctx, getTodo, id)
	var i Todo
	err := row.Scan(&i.ID, &i.Todo, &i.Description)
	return i, err
}

const listTodos = `-- name: ListTodos :many
SELECT id, todo, description FROM todos 
LIMIT 10
`

func (q *Queries) ListTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.Query(ctx, listTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(&i.ID, &i.Todo, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos
SET todo = $2, description = $3
WHERE id = $1
RETURNING id, todo, description
`

type UpdateTodoParams struct {
	ID          int32  `json:"id"`
	Todo        string `json:"todo"`
	Description string `json:"description"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, updateTodo, arg.ID, arg.Todo, arg.Description)
	var i Todo
	err := row.Scan(&i.ID, &i.Todo, &i.Description)
	return i, err
}
